import React, { useState } from "react";
import { useDispatch, useSelector } from "react-redux";
import { unlockCheckpoint } from "../redux/slices/checkpointsSlice";
import { showNotification } from "../redux/slices/notificationSlice";
import { incrementDistance } from "../redux/slices/distanceSlice";

const PasswordInput = ({ onSuccess }) => {
  const [password, setPassword] = useState(""); // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–∞—Ä–æ–ª—è
  const checkpoints = useSelector((state) => state.checkpoints.checkpoints); // –ü–æ–ª—É—á–∞–µ–º —á–µ–∫–ø–æ–∏–Ω—Ç—ã –∏–∑ —Å—Ç–æ—Ä–∞
  const dispatch = useDispatch(); // –î–∏—Å–ø–µ—Ç—á–µ—Ä –¥–ª—è Redux —ç–∫—à–µ–Ω–æ–≤

  const handleUnlock = () => {
    // –ò—â–µ–º —á–µ–∫–ø–æ–∏–Ω—Ç —Å –¥–∞–Ω–Ω—ã–º –ø–∞—Ä–æ–ª–µ–º (—Ä–µ–≥–∏—Å—Ç—Ä –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è)
    const checkpoint = checkpoints.find((cp) => cp.password.toLowerCase() === password.toLowerCase());

    if (checkpoint) {
      if (checkpoint.status === "locked") {
        dispatch(unlockCheckpoint(checkpoint.id)); // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º —á–µ–∫–ø–æ–∏–Ω—Ç
        dispatch(incrementDistance());
        dispatch(showNotification({ message: "‚úÖ –ß–µ–∫–ø–æ–∏–Ω—Ç –æ—Ç–∫—Ä—ã—Ç!", type: "success" }));

        setPassword(""); // –û—á–∏—Å—Ç–∏–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
        if (onSuccess) onSuccess(); // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
      }
    } else {
      dispatch(showNotification({ message: "üôà –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å!", type: "error" }));
    }
  };

  return (
    <div>
      <input
        type="text"
        className="input-field"
        value={password}
        onChange={(e) => setPassword(e.target.value)} // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–∞—Ä–æ–ª—è
        placeholder="–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å"
      />
      <button className="submit-btn" onClick={handleUnlock}>
        –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å
      </button>
    </div>
  );
};

export default PasswordInput;
