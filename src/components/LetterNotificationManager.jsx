import React, { useEffect } from "react";
import { useDispatch, useSelector } from "react-redux";
import { setLetters, updateLetterStatus, markLetterAsRead } from "../redux/slices/mailsSlice"; 
import { showNotification } from "../redux/slices/notificationSlice";
import axios from "axios";

const API_URL = "https://67acbdef3f5a4e1477dbb3f2.mockapi.io/Emails";


const LetterNotificationManager = () => {
  const distance = useSelector((state) => state.distance.distance); // –ü–æ–ª—É—á–∞–µ–º –¥–∏—Å—Ç–∞–Ω—Ü–∏—é –∏–∑ Redux
  const letters = useSelector((state) => state.mail.letters); // –ü–æ–ª—É—á–∞–µ–º –ø–∏—Å—å–º–∞ –∏–∑ Redux
  const dispatch = useDispatch();

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–∏—Å—å–º–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    const fetchLetters = async () => {
      try {
        const response = await axios.get(API_URL);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–∏—Å—å–º–∞ –≤ localStorage
        const savedLetters = JSON.parse(localStorage.getItem("letters"));
        if (savedLetters && savedLetters.length > 0) {
          // –ï—Å–ª–∏ –ø–∏—Å—å–º–∞ –µ—Å—Ç—å –≤ localStorage, –∑–∞–≥—Ä—É–∂–∞–µ–º –∏—Ö –≤ Redux
          dispatch(setLetters(savedLetters));
        } else {
          // –ï—Å–ª–∏ –ø–∏—Å–µ–º –Ω–µ—Ç –≤ localStorage, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Ö –≤ Redux –∏ –≤ localStorage
          const fetchedLetters = response.data;
          dispatch(setLetters(fetchedLetters));
          localStorage.setItem("letters", JSON.stringify(fetchedLetters)); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∏—Å—å–º–∞ –≤ localStorage
        }
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–∏—Å–µ–º:", error);
      }
    };

    fetchLetters();
  }, [dispatch]);

  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—É—é –¥–∏—Å—Ç–∞–Ω—Ü–∏—é –∏–∑ localStorage –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
  useEffect(() => {
    const savedDistance = localStorage.getItem("distance");
    if (savedDistance) {
      dispatch({ type: "distance/setDistance", payload: Number(savedDistance) });
    }
  }, [dispatch]);

  // –û–±–Ω–æ–≤–ª—è–µ–º distance –≤ localStorage –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
  useEffect(() => {
    localStorage.setItem("distance", distance);
  }, [distance]);

  // –õ–æ–≥–∏–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  useEffect(() => {
    const readLetters = JSON.parse(localStorage.getItem("readLetters")) || [];

    letters.forEach((letter) => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–∏—Å—å–º–æ –µ—â–µ –Ω–µ –ø—Ä–æ—á–∏—Ç–∞–Ω–æ –∏ –æ–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é
      
      if (letter.status === "locked" && letter.location <= distance && !readLetters.includes(letter.id)) {
        dispatch(showNotification({message: "üì© –£ –≤–∞—Å –Ω–æ–≤–æ–µ –ø–∏—Å—å–º–æ!", type: "success"}));
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–∏—Å—å–º–∞
        dispatch(updateLetterStatus({ id: letter.id, status: "unlocked", unlocked_at: new Date().toISOString() }));
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –ø–∏—Å–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
        readLetters.push(letter.id);
        localStorage.setItem("readLetters", JSON.stringify(readLetters));

        // –û–±–Ω–æ–≤–ª—è–µ–º Redux —Å –Ω–æ–≤—ã–º —Å–ø–∏—Å–∫–æ–º –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –ø–∏—Å–µ–º
        dispatch(markLetterAsRead(letter.id));
      }
    });
  }, [distance, letters, dispatch]);

  return null; // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–µ —Ä–µ–Ω–¥–µ—Ä–∏—Ç –Ω–∏—á–µ–≥–æ, –æ–Ω —Ç–æ–ª—å–∫–æ —É–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
};

export default LetterNotificationManager;
